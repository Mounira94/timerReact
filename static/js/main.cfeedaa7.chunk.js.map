{"version":3,"sources":["Components/Text.jsx","Components/Time.jsx","App.js","serviceWorker.js","index.js"],"names":["Text","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","onClick","startStopTime","btnName","resetTime","Component","Time","hours","minutes","seconds","React","App","_this","interval","Timer","setInterval","state","setState","stopTime","clearInterval","_React$createElement","Components_Time","defineProperty","Components_Text","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfeedaa7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Text extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <main className=\"main\">\r\n                <div className=\"time-desc\">\r\n                    <span className=\"time-text\">Hour </span>\r\n                    <span className=\"time-text\">Minute </span>\r\n                    <span className=\"time-text\">Second</span>\r\n                </div>\r\n                <div className=\"time-btn\" >\r\n                    <button className=\"btn\" onClick={this.props.startStopTime}>{this.props.btnName?'Stop':'Start'}</button>\r\n                    <button className=\"btn\" onClick={this.props.resetTime}>Reset</button>\r\n                </div>\r\n            </main>\r\n\r\n        )\r\n    }\r\n}\r\nexport default Text;","import React, { Component } from 'react';\r\nclass Time extends React.Component {\r\n    constructor(props) {\r\n        super(props)  \r\n  }\r\n    render() {\r\n\r\n        return (<main className=\"main\">\r\n            <div className=\"time\" >\r\n                 {this.props.hours < 10 ? '0' + this.props.hours : this.props.hours}:{this.props.minutes < 10 ? '0' + this.props.minutes : this.props.minutes}:{this.props.seconds < 10 ? '0' + this.props.seconds : this.props.seconds}\r\n            </div>\r\n        </main>)\r\n    }\r\n}\r\nexport default Time;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Text from './Components/Text';\nimport Time from './Components/Time';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      seconds: 0,\n      minutes: 0,\n      hours: 0,\n      btnName: false\n    }\n  }\n  interval = {}\n\n  Timer = () => {\n   this.interval=setInterval(() => {\n      if (this.state.btnName) {\n        if (this.state.seconds == 60) {\n          this.setState({\n            seconds: 0,\n            minutes: this.state.minutes + 1\n          })\n        } else {\n          this.setState({\n            seconds: this.state.seconds + 1\n          })\n        }\n        if (this.state.minutes == 60) {\n          this.setState({\n            minutes: 0,\n            hours: this.state.hours + 1\n          })\n\n        }\n      }\n    }, 1000)\n  }\n  stopTime = () => {\n\n    this.setState({\n      btnName: !this.state.btnName ,\n    })\n    clearInterval(this.interval) \n  }\n  startStopTime = () => {\n    this.stopTime()\n    this.Timer()\n  }\n  resetTime = () => {\n    this.setState({\n      minutes: 0,\n      hours: 0,\n      seconds: 0\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Time hours={this.state.hours}\n          minutes={this.state.minutes}\n          seconds={this.state.seconds}\n          hours={this.state.hours}\n          minutes={this.state.minutes}\n          seconds={this.state.seconds} />\n        <Text\n          // startTime={this.Timer} \n          resetTime={this.resetTime}\n          startStopTime={this.startStopTime}\n          btnName={this.state.btnName}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}